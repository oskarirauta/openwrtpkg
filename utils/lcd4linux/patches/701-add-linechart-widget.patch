--- a/Makefile.am
+++ b/Makefile.am
@@ -135,6 +135,7 @@ font_6x8.h                    \
 font_6x8_bold.h               \
 widget_image.c widget_image.h \
 widget_ttf.c widget_ttf.h \
+widget_linechart.c widget_linechart.h \
                               \
 lcd4linux_i2c.h               \
                               \
--- a/drivers.m4
+++ b/drivers.m4
@@ -933,7 +933,7 @@ fi
 if test "$GRAPHIC" = "yes"; then
    DRIVERS="$DRIVERS drv_generic_graphic.o"
    if test "$has_gd" = "true"; then
-      DRIVERS="$DRIVERS widget_image.o widget_ttf.o"
+      DRIVERS="$DRIVERS widget_image.o widget_ttf.o widget_linechart.o"
       DRVLIBS="$DRVLIBS -lgd"
       AC_DEFINE(WITH_GD, 1, [GD library])
       AC_DEFINE(WITH_IMAGE, 1, [image widget])
--- a/drv_generic_graphic.c
+++ b/drv_generic_graphic.c
@@ -70,6 +70,7 @@
 #include "widget_bar.h"
 #include "widget_image.h"
 #include "widget_ttf.h"
+#include "widget_linechart.h"
 #include "rgb.h"
 #include "drv.h"
 #include "drv_generic.h"
@@ -755,6 +756,9 @@ int drv_generic_graphic_init(const char
 	wc = Widget_Truetype;
 	wc.draw = drv_generic_graphic_image_draw;
 	widget_register(&wc);
+	wc = Widget_Linechart;
+	wc.draw = drv_generic_graphic_image_draw;
+	widget_register(&wc);
 #endif
 
 	/* clear framebuffer but do not blit to display */
--- /dev/null
+++ b/widget_linechart.c
@@ -0,0 +1,421 @@
+/* $Id$
+ * $URL$
+ *
+ * linechart widget handling
+ *
+ * Copyright (C) 2023 Oskari Rauta <oskari.rauta@gmail.com>
+ * MIT License
+ *
+ */
+
+/*
+ * exported functions:
+ *
+ * WIDGET_CLASS Widget_Linechart
+ *   the linechart widget
+ *
+ */
+
+
+#include "config.h"
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <ctype.h>
+#include <errno.h>
+
+#ifdef HAVE_GD_GD_H
+#include <gd/gd.h>
+#else
+#ifdef HAVE_GD_H
+#include <gd.h>
+#else
+#error "gd.h not found!"
+#error "cannot compile linechart widget"
+#endif
+#endif
+
+#if GD2_VERS != 2
+#error "lcd4linux requires libgd version 2"
+#error "cannot compile linechart widget"
+#endif
+
+#include "debug.h"
+#include "cfg.h"
+#include "qprintf.h"
+#include "property.h"
+#include "timer_group.h"
+#include "widget.h"
+#include "widget_linechart.h"
+#include "rgb.h"
+#include "drv_generic.h"
+
+#ifdef WITH_DMALLOC
+#include <dmalloc.h>
+#endif
+
+static int extract_color(gdImagePtr gdImage, char *color) {
+
+	char *e;
+	unsigned long l;
+	unsigned char r,g,b,a;
+
+	if (strlen(color) == 8)
+	{
+		l = strtoul(color, &e, 16);
+		r = (l >> 24) & 0xff;
+		g = (l >> 16) & 0xff;
+		b = (l >> 8) & 0xff;
+		a = (l & 0xff) /2;
+
+		return gdImageColorAllocateAlpha(gdImage, r, g, b, 127 - a);
+	}
+	else
+	{
+		l = strtoul(color, &e, 16);
+		r = (l >> 18) & 0xff;
+		g = (l >> 8) & 0xff;
+		b = l & 0xff;
+
+		return gdImageColorAllocate(gdImage, r, g, b);
+	}
+}
+
+static void widget_linechart_render(const char *Name, WIDGET_LINECHART * Image)
+{
+	int x, y;
+	gdImagePtr gdImage;
+	int _width,_height;
+
+	/* clear bitmap */
+	if (Image->bitmap)
+	{
+		int i;
+		for (i = 0; i < Image->height * Image->width; i++)
+		{
+			RGBA empty = {.R = 0x00,.G = 0x00,.B = 0x00,.A = 0x00 };
+			Image->bitmap[i] = empty;
+		}
+	}
+
+	_width = P2N(&Image->_width);
+	_height = P2N(&Image->_height);
+
+	/* reload image only on first call or on explicit reload request */
+	if (Image->gdImage == NULL || P2N(&Image->reload))
+	{
+
+		/* free previous image */
+		if (Image->gdImage)
+		{
+			gdImageDestroy(Image->gdImage);
+			Image->gdImage = NULL;
+		}
+
+		Image->gdImage = gdImageCreateTrueColor(_width,_height);
+
+		if (Image->gdImage == NULL)
+		{
+			error("Warning: Linechart %s: CreateFromTrueColor failed!", Name);
+			return;
+		}
+
+		/* update data */
+
+		if (Image->values == NULL)
+		{
+			int i = sizeof(char) * _width;
+			Image->values = malloc(i);
+			memset(Image->values,0,i);
+
+			if (Image->values == NULL)
+			{
+				error("Warning: Linechart %s: value data malloc(%d) failed: %s", Name, _width, strerror(errno));
+				return;
+			}
+		}
+		else
+		{
+			int i;
+			for (i = 1; i < _width; i++)
+				Image->values[i-1] = Image->values[i];
+
+			char pval;
+			double val, vmin, vmax;
+			property_eval(&Image->expression);
+			val = P2N(&Image->expression);
+			vmin = P2N(&Image->expr_min);
+			vmax = P2N(&Image->expr_max);
+
+			char oval = val;
+
+			if ( vmax < 1 ) vmax = 1;
+			if ( vmin > vmax ) vmin = 0;
+			if ( val > vmax ) val = vmax;
+			if ( val < vmin ) val = vmin;
+
+			pval = ((val - vmin) * 100 ) / (vmax - vmin);
+			char opval = pval;
+			if ( pval < 0 ) pval = 0;
+			if ( pval > 100 ) pval = 100;
+
+			//pval = 50;
+
+			Image->values[_width-1] = pval;
+			// error("Storing percent value %d(%d) from %d(%d)", pval, opval, val, oval);
+		}
+
+		int fcolor = extract_color(Image->gdImage,P2S(&Image->fcolor));
+		int bcolor = extract_color(Image->gdImage,P2S(&Image->bcolor));
+		int bgcolor = extract_color(Image->gdImage,P2S(&Image->background));
+
+		/* Fill background */
+		gdImageSaveAlpha(Image->gdImage, 1);
+		gdImageFill(Image->gdImage, 0, 0, bgcolor);
+
+		char prev = 105; // out of percentage range 0-100 by design
+		int i;
+
+		/* Generate graph */
+		//error("Generating graphs..");
+
+		for ( i = 0; i < _width; i++ ) {
+
+			char cur = Image->values[i];
+			double pval1 = (_height - 1) * (cur * 0.01);
+			int y1 = (_height - 1) - (int)pval1;
+			int y2 = y1;
+
+			if ( prev < 101 ) {
+				double pval2 = (_height - 1) * (prev * 0.01);
+				y2 = (_height - 1) - (int)pval2;
+
+				if ( y2 < y1 ) y2 += 1;
+				else if ( y2 > y1 ) y2 -= 1;
+			}
+
+			if ( y2 == y1 ) {
+
+				gdImageSetPixel(Image->gdImage,i,y1,fcolor);
+
+				if ( y1 + 1 < _height - 1 )
+					gdImageLine(Image->gdImage,i,y1 + 1,i,_height,bcolor);
+			} else {
+
+				gdImageLine(Image->gdImage,i,y1,i,y2,fcolor);
+
+				if ( y2 + 1 < _height - 1 )
+					gdImageLine(Image->gdImage,i,y2 + 1,i,_height,bcolor);
+			}
+
+			prev = cur;
+		}
+
+	}
+
+	/* maybe resize bitmap */
+	gdImage = Image->gdImage;
+	if (gdImage->sx > Image->width)
+	{
+		Image->width = gdImage->sx;
+		free(Image->bitmap);
+		Image->bitmap = NULL;
+	}
+	if (gdImage->sy > Image->height)
+	{
+		Image->height = gdImage->sy;
+		free(Image->bitmap);
+		Image->bitmap = NULL;
+	}
+	if (Image->bitmap == NULL && Image->width > 0 && Image->height > 0)
+	{
+		int i = Image->width * Image->height * sizeof(Image->bitmap[0]);
+		Image->bitmap = malloc(i);
+		if (Image->bitmap == NULL)
+		{
+			error("Warning: Linechart %s: malloc(%d) failed: %s", Name, i, strerror(errno));
+			return;
+		}
+		for (i = 0; i < Image->height * Image->width; i++)
+		{
+			RGBA empty = {.R = 0x00,.G = 0x00,.B = 0x00,.A = 0x00 };
+			Image->bitmap[i] = empty;
+		}
+	}
+
+
+	/* finally really render it */
+	if (P2N(&Image->visible))
+	{
+		for (x = 0; x < gdImage->sx; x++)
+		{
+			for (y = 0; y < gdImage->sy; y++)
+			{
+				int p = gdImageGetTrueColorPixel(gdImage, x, y);
+				int a = gdTrueColorGetAlpha(p);
+				int i = y * Image->width + x;
+				Image->bitmap[i].R = gdTrueColorGetRed(p);
+				Image->bitmap[i].G = gdTrueColorGetGreen(p);
+				Image->bitmap[i].B = gdTrueColorGetBlue(p);
+				/* GD's alpha is 0 (opaque) to 127 (tranparanet) */
+				/* our alpha is 0 (transparent) to 255 (opaque) */
+				Image->bitmap[i].A = (a == 127) ? 0 : 255 - 2 * a;
+			}
+		}
+	}
+}
+
+
+void widget_linechart_update(void *Self)
+{
+	WIDGET *W = (WIDGET *) Self;
+	WIDGET_LINECHART *Image = W->data;
+
+	/* process the parent only */
+	if (W->parent == NULL)
+	{
+
+		/* evaluate properties */
+		property_eval(&Image->expression);
+		property_eval(&Image->expr_min);
+		property_eval(&Image->expr_max);
+		property_eval(&Image->fcolor);
+		property_eval(&Image->bcolor);
+		property_eval(&Image->background);
+		property_eval(&Image->_width);
+		property_eval(&Image->_height);
+		property_eval(&Image->update);
+		property_eval(&Image->reload);
+		property_eval(&Image->visible);
+
+		/* render image into bitmap */
+		widget_linechart_render(W->name, Image);
+
+	}
+
+	/* finally, draw it! */
+	if (W->class->draw)
+		W->class->draw(W);
+
+	/* add a new one-shot timer */
+	if (P2N(&Image->update) > 0)
+	{
+		timer_add_widget(widget_linechart_update, Self, P2N(&Image->update), 1);
+	}
+}
+
+
+
+int widget_linechart_init(WIDGET * Self)
+{
+	char *section;
+	WIDGET_LINECHART *Image;
+
+	/* re-use the parent if one exists */
+	if (Self->parent == NULL)
+	{
+
+		/* prepare config section */
+		/* strlen("Widget:")=7 */
+		section = malloc(strlen(Self->name) + 8);
+		strcpy(section, "Widget:");
+		strcat(section, Self->name);
+
+		Image = malloc(sizeof(WIDGET_LINECHART));
+		memset(Image, 0, sizeof(WIDGET_LINECHART));
+
+		/* initial size */
+		Image->width = 0;
+		Image->height = 0;
+		Image->bitmap = NULL;
+		Image->values = NULL;
+
+		/* load properties */
+		property_load(section, "expression", NULL, &Image->expression);
+		property_load(section, "min", "0", &Image->expr_min);
+		property_load(section, "max", "1000", &Image->expr_max);
+		property_load(section, "fcolor", "00ff00", &Image->fcolor);
+		property_load(section, "bcolor", "00aa00", &Image->bcolor);
+		property_load(section, "background", "000000ff", &Image->background);
+		property_load(section, "width", "170", &Image->_width);
+		property_load(section, "height", "100", &Image->_height);
+		property_load(section, "update", "100", &Image->update);
+		property_load(section, "reload", "0", &Image->reload);
+		property_load(section, "visible", "1", &Image->visible);
+
+		/* sanity checks */
+		if (!property_valid(&Image->expression))
+		{
+			error("Warning: widget %s has no expression", section);
+		}
+
+		free(section);
+		Self->data = Image;
+		Self->x2 = Self->col + Image->width;
+		Self->y2 = Self->row + Image->height;
+
+	}
+	else
+	{
+
+		/* re-use the parent */
+		Self->data = Self->parent->data;
+
+	}
+
+	/* just do it! */
+	widget_linechart_update(Self);
+
+	return 0;
+}
+
+
+int widget_linechart_quit(WIDGET * Self)
+{
+	if (Self)
+	{
+		/* do not deallocate child widget! */
+		if (Self->parent == NULL)
+		{
+			if (Self->data)
+			{
+				WIDGET_LINECHART *Image = Self->data;
+				if (Image->gdImage)
+				{
+					gdImageDestroy(Image->gdImage);
+					Image->gdImage = NULL;
+				}
+				free(Image->bitmap);
+				free(Image->values);
+				property_free(&Image->expression);
+				property_free(&Image->expr_min);
+				property_free(&Image->expr_max);
+				property_free(&Image->fcolor);
+				property_free(&Image->bcolor);
+				property_free(&Image->background);
+				property_free(&Image->_width);
+				property_free(&Image->_height);
+				property_free(&Image->update);
+				property_free(&Image->reload);
+				property_free(&Image->visible);
+				free(Self->data);
+				Self->data = NULL;
+			}
+		}
+	}
+
+	return 0;
+
+}
+
+
+
+WIDGET_CLASS Widget_Linechart =
+{
+	.name = "linechart",
+	.type = WIDGET_TYPE_XY,
+	.init = widget_linechart_init,
+	.draw = NULL,
+	.quit = widget_linechart_quit,
+};
--- /dev/null
+++ b/widget_linechart.h
@@ -0,0 +1,56 @@
+/* $Id$
+ * $URL$
+ *
+ * image widget handling
+ *
+ * Copyright (C) 2006 Michael Reinelt <michael@reinelt.co.at>
+ * Copyright (C) 2006 The LCD4Linux Team <lcd4linux-devel@users.sourceforge.net>
+ *
+ * This file is part of LCD4Linux.
+ *
+ * LCD4Linux is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2, or (at your option)
+ * any later version.
+ *
+ * LCD4Linux is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
+ *
+ */
+
+
+#ifndef _WIDGET_LINECHART_H_
+#define _WIDGET_LINECHART_H_
+
+#include "property.h"
+#include "widget.h"
+#include "rgb.h"
+
+typedef struct WIDGET_LINECHART
+{
+	void *gdImage;			/* raw gd image */
+	RGBA *bitmap;			/* image bitmap */
+	int width, height;		/* size of the image */
+	char *values;			/* array of linegraph's values */
+	PROPERTY expression;		/* expression to use for generating chart */
+	PROPERTY expr_min;		/* explicit minimum value */
+	PROPERTY expr_max;		/* explicit maximum value */
+	PROPERTY _width;		/* scale image to witdh */
+	PROPERTY _height;		/* scale image to height */
+	PROPERTY fcolor;		/* line color */
+	PROPERTY bcolor;		/* graph fill color */
+	PROPERTY background;		/* widget background color */
+	PROPERTY update;		/* update interval */
+	PROPERTY reload;		/* reload image on update? */
+	PROPERTY visible;		/* image visible? */
+} WIDGET_LINECHART;
+
+extern WIDGET_CLASS Widget_Linechart;
+
+#endif
