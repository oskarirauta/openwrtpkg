From ebb6229392eb1b8bef46e27f1b79b7a09f7d984e Mon Sep 17 00:00:00 2001
From: Florian Eckert <fe@dev.tdt.de>
Date: Fri, 12 Jul 2019 14:16:21 +0200
Subject: [PATCH] drv_FutabaVFD: refatoring

Signed-off-by: Florian Eckert <fe@dev.tdt.de>
---
 drv_FutabaVFD.c | 347 ++++++++++++++++++++++++++----------------------
 1 file changed, 186 insertions(+), 161 deletions(-)

--- a/drv_FutabaVFD.c
+++ b/drv_FutabaVFD.c
@@ -40,6 +40,7 @@
 #include <unistd.h>
 #include <string.h>
 #include <errno.h>
+#include <math.h>
 
 #include "debug.h"
 #include "cfg.h"
@@ -55,29 +56,51 @@
 #include "drv_generic_text.h"
 #include "drv_generic_parport.h"
 
+#include "timer.h"
+#include "action.h"
 
-static char Name[] = "FutabaVFD";
+
+#define NAME "FutabaVFD"
+#define RELEASE NAME " 0.0.2"
+
+#define PWR_ON 1
+#define PWR_OFF 0
 
 static unsigned char SIGNAL_WR;
 static unsigned char SIGNAL_SELECT;
-static unsigned char SIGNAL_TEST;
+static unsigned char SIGNAL_TEST;	/*test mode not implemented */
 static unsigned char SIGNAL_BUSY;
+static unsigned char SIGNAL_PWR_ON;
+static unsigned char SIGNAL_PWR_5V;
 
-static unsigned char dim;	/* brightness 0..3 */
-static unsigned char curPos;	/* cursor position */
-static unsigned char curOn;	/* cursor on */
+static unsigned char SIGNAL_PWR_5V;
+static unsigned char SIGNAL_PWR_5V;
 
-static unsigned char BUSY_SHIFT;
-static unsigned char BUSY_VALUE;
+static int pwrState = PWR_OFF;
+static int dim = 0;		/* brightness 0..3 */
 
+static char *displayBuffer = NULL;
+static Action *firstAction = NULL;
 
-/****************************************/
-/***  hardware dependant functions    ***/
-/****************************************/
+static void my_reset(void);
+
+static void my_set_pwr_state(int newState)
+{
+
+    if (pwrState != newState) {
+	pwrState = newState;
+	if (pwrState == PWR_ON)
+	    my_reset();
+	action_trigger(firstAction, (pwrState == PWR_ON) ? "poweron" : "poweroff");
+    }
+}
 
 
-/* example for sending one byte over the wire */
-static void drv_FutabaVFD_writeChar(const unsigned char c)
+/* sending one byte over the wire 
+ * returns PWR_ON if VFD powered and write ok 
+ * else PWR_OFF
+ */
+static int my_writeChar_help(const unsigned char c)
 {
 
     int i;
@@ -91,66 +114,109 @@ static void drv_FutabaVFD_writeChar(cons
     /*wait <=60ns till busy */
     for (i = 0; i < 60; i++) {
 	status = drv_generic_parport_status();
-	if (((status >> BUSY_SHIFT) & 1) == BUSY_VALUE)
+	if (!(status & SIGNAL_PWR_ON))
+	    return PWR_OFF;
+	if (!(status & SIGNAL_BUSY))	/* signal inverted */
 	    break;
 	ndelay(1);
     }
+
     ndelay(60 - i);
     drv_generic_parport_control(SIGNAL_SELECT, 0xFF);
+    drv_generic_parport_control(SIGNAL_WR, 0);
 
-    /*wait max 0.1s till not busy */
-    for (i = 0; i < 100000000; i++) {
+    /*wait max 32000ns till not busy */
+    for (i = 0; i < 32000; i++) {
 	status = drv_generic_parport_status();
-	if (((status >> BUSY_SHIFT) & 1) != BUSY_VALUE)
+	if (!(status & SIGNAL_PWR_ON))
+	    return PWR_OFF;
+	if ((status & SIGNAL_BUSY))	/* signal inverted */
 	    break;
 	ndelay(1);
     }
+
     ndelay(210);
+    return PWR_ON;
 }
 
 
+static int my_writeChar(const unsigned char c)
+{
+
+    if (pwrState == PWR_ON)
+	my_set_pwr_state(my_writeChar_help(c));
 
-static void drv_FutabaVFD_showCursor(int b)
+    return pwrState;
+}
+
+
+static void my_goto(const unsigned char pos)
 {
-    drv_FutabaVFD_writeChar((b) ? 0x13 : 0x14);	/* b==0: cursor off */
+    my_writeChar(0x10);
+    my_writeChar(pos);
 }
 
-static void drv_FutabaVFD_clear()
+
+static void my_brightness(const int brightness)
+{
+    if (brightness < 0)
+	dim = 0;
+    else if (brightness > 3)
+	dim = 3;
+    else
+	dim = brightness;
+    unsigned char val = (dim < 3) ? (1 + dim) * 0x20 : 0xFF;
+    my_writeChar(0x04);
+    my_writeChar(val);
+}
+
+
+static void my_reset(void)
 {
-    drv_FutabaVFD_writeChar(0x1F);	/*reset */
-    drv_FutabaVFD_writeChar(0x11);	/*DC1 - normal display */
-    drv_FutabaVFD_showCursor(0);
+    my_writeChar(0x1F);		/*reset */
+    my_writeChar(0x14);		/*hide cursor */
+    my_writeChar(0x11);		/*DC1 - normal display */
+    my_brightness(dim);
+
+    if (displayBuffer == NULL)
+	return;
+
+    int r, c;
+    for (r = 0; r < DROWS; r++) {
+	my_goto(r * DCOLS);
+	for (c = 0; c < DCOLS; c++)
+	    if (my_writeChar(displayBuffer[r * DCOLS + c]) != PWR_ON)
+		return;
+    }
 }
 
 
-static int drv_FutabaVFD_open(const char *section)
+static int my_open(const char *section)
 {
 
-    if (drv_generic_parport_open(section, Name) != 0) {
-	error("%s: could not initialize parallel port!", Name);
+    if (drv_generic_parport_open(section, NAME) != 0) {
+	error("%s: could not initialize parallel port!", NAME);
 	return -1;
     }
 
-    /* read the wiring from config */
-    if ((SIGNAL_WR = drv_generic_parport_wire_ctrl("WR", "STROBE")) == 0xFF)
+    /* hardwired */
+
+    if ((SIGNAL_WR = drv_generic_parport_hardwire_ctrl("WR", "STROBE")) == 0xFF)
 	return -1;
-    if ((SIGNAL_SELECT = drv_generic_parport_wire_ctrl("SEL", "SLCTIN")) == 0xFF)
+    if ((SIGNAL_SELECT = drv_generic_parport_hardwire_ctrl("SEL", "SLCTIN")) == 0xFF)
 	return -1;
-    if ((SIGNAL_TEST = drv_generic_parport_wire_ctrl("TEST", "AUTOFD")) == 0xFF)
+    if ((SIGNAL_TEST = drv_generic_parport_hardwire_ctrl("TEST", "AUTOFD")) == 0xFF)
 	return -1;
-    if ((SIGNAL_BUSY = drv_generic_parport_wire_status("BUSY", "BUSY")) == 0xFF)
+    if ((SIGNAL_PWR_5V = drv_generic_parport_hardwire_ctrl("PWR_5V", "INIT")) == 0xFF)
+	return -1;
+    if ((SIGNAL_BUSY = drv_generic_parport_hardwire_status("BUSY", "BUSY")) == 0xFF)
+	return -1;
+    if ((SIGNAL_PWR_ON = drv_generic_parport_hardwire_status("PWR_ON", "PAPEROUT")) == 0xFF)
 	return -1;
 
-    BUSY_SHIFT = 0;
-    BUSY_VALUE = SIGNAL_BUSY;
-    while (BUSY_VALUE > 1) {
-	BUSY_VALUE >>= 1;
-	BUSY_SHIFT++;
-    }
-    BUSY_VALUE = (SIGNAL_BUSY == 0x80) ? 0 : 1;	/* portpin 11 inverted */
-
-    /* set all signals to high */
-    drv_generic_parport_control(SIGNAL_WR | SIGNAL_SELECT | SIGNAL_TEST, 0xFF);
+    /* set all signals but WR to high */
+    drv_generic_parport_control(SIGNAL_SELECT | SIGNAL_TEST | SIGNAL_PWR_5V, 0xFF);
+    drv_generic_parport_control(SIGNAL_WR, 0);
 
     /* set direction: write */
     drv_generic_parport_direction(0);
@@ -159,70 +225,27 @@ static int drv_FutabaVFD_open(const char
 }
 
 
-static int drv_FutabaVFD_close(void)
+static void my_write(const int row, const int col, const char *data, const int len)
 {
-    drv_generic_parport_close();
-    return 0;
-}
+    if (displayBuffer != NULL)
+	memcpy(displayBuffer + (DCOLS * row + col), data, len);
 
-static void drv_FutabaVFD_send(const char *data, const unsigned int len)
-{
-    unsigned int i;
+    my_goto(row * DCOLS + col);
+    int i;
     for (i = 0; i < len; i++)
-	drv_FutabaVFD_writeChar(*data++);
-}
-
-
-static void drv_FutabaVFD_goto(unsigned char pos)
-{
-    curPos = pos;
-    drv_FutabaVFD_writeChar(0x10);
-    drv_FutabaVFD_writeChar(curPos);
+	if (my_writeChar(*data++) != PWR_ON)
+	    break;
 }
 
 
-static void drv_FutabaVFD_write(const int row, const int col, const char *data, int len)
-{
-    unsigned char oldPos = curPos;
-    if (curOn)
-	drv_FutabaVFD_showCursor(0);
-    drv_FutabaVFD_goto(row * DCOLS + col);
-    drv_FutabaVFD_send(data, len);
-    drv_FutabaVFD_goto(oldPos);
-    if (curOn)
-	drv_FutabaVFD_showCursor(1);
-}
-
-static void drv_FutabaVFD_defchar(const int ascii, const unsigned char *matrix)
+static void my_defchar(const int ascii, const unsigned char *matrix)
 {
     return;			// no defchars
 }
 
 
-static void drv_FutabaVFD_brightness(int brightness)
-{
-
-    if (brightness < 0)
-	dim = 0;
-    else if (brightness > 3)
-	dim = 3;
-    else
-	dim = brightness;
-
-    drv_FutabaVFD_writeChar(0x04);
-    drv_FutabaVFD_writeChar((dim < 3) ? (1 + dim) * 0x20 : 0xFF);
-}
-
-
-static void drv_FutabaVFD_test(int test)
-{
-    drv_generic_parport_control(SIGNAL_TEST, (test) ? 0 : 0xFF);
-}
-
-
-
 /* start text mode display */
-static int drv_FutabaVFD_start(const char *section)
+static int my_start(const char *section)
 {
 
     int brightness;
@@ -232,11 +255,11 @@ static int drv_FutabaVFD_start(const cha
 
     s = cfg_get(section, "Size", NULL);
     if (s == NULL || *s == '\0') {
-	error("%s: no '%s.Size' entry from %s", Name, section, cfg_source());
+	error("%s: no '%s.Size' entry from %s", NAME, section, cfg_source());
 	return -1;
     }
     if (sscanf(s, "%dx%d", &cols, &rows) != 2 || rows < 1 || cols < 1) {
-	error("%s: bad %s.Size '%s' from %s", Name, section, s, cfg_source());
+	error("%s: bad %s.Size '%s' from %s", NAME, section, s, cfg_source());
 	free(s);
 	return -1;
     }
@@ -244,16 +267,17 @@ static int drv_FutabaVFD_start(const cha
     DROWS = rows;
     DCOLS = cols;
 
-    /* open communication with the display */
-    if (drv_FutabaVFD_open(section) < 0)
-	return -1;
 
+    const char *names[] = { "poweron", "poweroff", NULL };
+    action_init_multiple(section, names, &firstAction);
 
-    if (cfg_number(section, "Brightness", 0, 0, 255, &brightness) > 0)
-	drv_FutabaVFD_brightness(brightness);
 
+    /* open communication with the display */
+    if (my_open(section) < 0)
+	return -1;
 
-    drv_FutabaVFD_clear();	/* clear display */
+    if (cfg_number(section, "brightness", 0, 0, 255, &brightness) > 0)
+	dim = brightness;
 
     return 0;
 }
@@ -271,31 +295,24 @@ static void plugin_brightness(RESULT * r
 
     switch (argc) {
     case 0:
-	SetResult(&result, R_NUMBER, &d);
 	break;
     case 1:
-	drv_FutabaVFD_brightness(R2N(argv[0]));
+	my_brightness(R2N(argv[0]));
 	d = dim;
-	SetResult(&result, R_NUMBER, &d);
 	break;
     default:
-	error("%s::brightness(): wrong number of parameters", Name);
-	SetResult(&result, R_STRING, "");
+	error("LCD::brightness(): wrong number of parameters.");
+	d = -1;
     }
+    SetResult(&result, R_NUMBER, &d);
 }
 
+static void plugin_power(RESULT * result)
+{
 
-
-/****************************************/
-/***        widget callbacks          ***/
-/****************************************/
-
-
-/* using drv_generic_text_draw(W) */
-/* using drv_generic_text_icon_draw(W) */
-/* using drv_generic_text_bar_draw(W) */
-/* using drv_generic_gpio_draw(W) */
-
+    double res = (pwrState == PWR_ON) ? 1 : 0;
+    SetResult(&result, R_NUMBER, &res);
+}
 
 /****************************************/
 /***        exported functions        ***/
@@ -303,77 +320,70 @@ static void plugin_brightness(RESULT * r
 
 
 /* list models */
-int drv_FutabaVFD_list(void)
+int my_list(void)
 {
     printf("Futaba VFD M402SD06GL");
     return 0;
 }
 
 
-/* initialize driver & display */
-/* use this function for a text display */
-int drv_FutabaVFD_init(const char *section, const int quiet)
+static void my_pwr_check_callback(void *null)
 {
-    WIDGET_CLASS wc;
-    int ret;
+
+    int newState = (drv_generic_parport_status() & SIGNAL_PWR_ON)
+	? PWR_ON : PWR_OFF;
+
+    my_set_pwr_state(newState);
+}
 
 
-    info("%s: %s", Name, "$Rev: 0.0.1 $");
+/* initialize driver & display */
+/* use this function for a text display */
+int my_init(const char *section, const int quiet)
+{
+    info("Init %s %s.", NAME, RELEASE);
 
+    WIDGET_CLASS wc;
 
     XRES = 5;			/* pixel width of one char  */
     YRES = 7;			/* pixel height of one char  */
     GOTO_COST = 2;		/* number of bytes a goto command requires */
 
-
     /* real worker functions */
-    drv_generic_text_real_write = drv_FutabaVFD_write;
-    drv_generic_text_real_defchar = drv_FutabaVFD_defchar;
-
+    drv_generic_text_real_write = my_write;
+    drv_generic_text_real_defchar = my_defchar;
 
     /* start display */
-    if ((ret = drv_FutabaVFD_start(section)) != 0)
+    int ret;
+    if ((ret = my_start(section)) != 0)
 	return ret;
 
-    if (!quiet) {
-	char buffer[40];
-	qprintf(buffer, sizeof(buffer), "%s %dx%d", Name, DCOLS, DROWS);
-	if (drv_generic_text_greet(buffer, "---")) {
-	    sleep(3);
-	    drv_FutabaVFD_clear();
-	}
-    }
-
     /* initialize generic text driver */
-    if ((ret = drv_generic_text_init(section, Name)) != 0)
+    if ((ret = drv_generic_text_init(section, NAME)) != 0)
 	return ret;
 
-    /* initialize generic icon driver TODO */
-
+    /* initialize generic icon driver */
     if ((ret = drv_generic_text_icon_init()) != 0)
 	return ret;
 
-
     /* initialize generic bar driver */
-    if ((ret = drv_generic_text_bar_init(0)) != 0)
+    if ((ret = drv_generic_text_bar_init(1)) != 0)
 	return ret;
 
     /* add fixed chars to the bar driver */
-    drv_generic_text_bar_add_segment(0, 0, 255, '_');	/* ASCII  32 = blank */
-    drv_generic_text_bar_add_segment(255, 255, 255, 0x7F);	/* 0x7F = full dot */
-
+    drv_generic_text_bar_add_segment(0, 0, 255, '_');
+    drv_generic_text_bar_add_segment(255, 255, 255, 0x7F);	/* full dot */
 
     /* register text widget */
     wc = Widget_Text;
     wc.draw = drv_generic_text_draw;
     widget_register(&wc);
 
-    /* register icon widget TODO */
+    /* register icon widget */
     wc = Widget_Icon;
     wc.draw = drv_generic_text_icon_draw;
     widget_register(&wc);
 
-
     /* register bar widget */
     wc = Widget_Bar;
     wc.draw = drv_generic_text_bar_draw;
@@ -381,8 +391,21 @@ int drv_FutabaVFD_init(const char *secti
 
     /* register plugins */
     AddFunction("LCD::brightness", -1, plugin_brightness);
+    AddFunction("LCD::power", 0, plugin_power);
 
+    my_reset();			/* clear display */
 
+    if (!quiet && drv_generic_text_greet(NULL, NULL)) {
+	sleep(3);
+    }
+
+    displayBuffer = malloc(DROWS * DCOLS * sizeof(char));
+    if (displayBuffer != NULL)
+	memset(displayBuffer, 0x20, DROWS * DCOLS);
+    else
+	return -1;
+
+    timer_add(my_pwr_check_callback, NULL, 100, 0);
 
     return 0;
 }
@@ -390,29 +413,31 @@ int drv_FutabaVFD_init(const char *secti
 
 /* close driver & display */
 /* use this function for a text display */
-int drv_FutabaVFD_quit(const int quiet)
+int my_quit(const int quiet)
 {
+    info("%s: shutting down.", NAME);
 
-    info("%s: shutting down.", Name);
+    timer_remove(my_pwr_check_callback, NULL);
 
-    drv_generic_text_quit();
+    free(displayBuffer);
+    displayBuffer = NULL;
 
-    drv_FutabaVFD_clear();
+    action_free_all(firstAction);
+    firstAction = NULL;
 
-    if (!quiet) {
-	drv_generic_text_greet("goodbye!", NULL);
-    }
+    my_reset();
+    my_write(0, 0, "Goodbye...", 10);
 
+    drv_generic_text_quit();
     debug("closing connection");
-    drv_FutabaVFD_close();
-
+    drv_generic_parport_close();
     return (0);
 }
 
-/* use this one for a text display */
+/* CHECKED */
 DRIVER drv_FutabaVFD = {
-    .name = Name,
-    .list = drv_FutabaVFD_list,
-    .init = drv_FutabaVFD_init,
-    .quit = drv_FutabaVFD_quit,
+    .name = NAME,
+    .list = my_list,
+    .init = my_init,
+    .quit = my_quit,
 };
