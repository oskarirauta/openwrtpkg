--- a/timer.c
+++ b/timer.c
@@ -72,38 +72,6 @@
 #include <dmalloc.h>
 #endif
 
-/* threshold in milliseconds that differentiates between clock skew
-   and clock jitter */
-#define CLOCK_SKEW_DETECT_TIME_IN_MS 1000
-
-/* structure for storing all relevant data of a single timer */
-typedef struct TIMER {
-    /* pointer to function of type void func(void *data) that will be
-       called when the timer is processed; it will also be used to
-       identify a specific timer */
-    void (*callback) (void *data);
-
-    /* pointer to data which will be passed to the callback function;
-       it will also be used to identify a specific timer */
-    void *data;
-
-    /* struct to hold the time (in seconds and milliseconds since the
-       Epoch) when the timer will be processed for the next time */
-    struct timeval when;
-
-    /* specifies the timer's triggering interval in milliseconds */
-    int interval;
-
-    /* specifies whether the timer should trigger indefinitely until
-       it is deleted (value of 0) or only once (all other values) */
-    int one_shot;
-
-    /* marks timer as being active (so it will get processed) or
-       inactive (which means the timer has been deleted and its
-       allocated memory may be re-used) */
-    int active;
-} TIMER;
-
 /* number of allocated timer slots */
 int nTimers = 0;
 
--- a/timer.h
+++ b/timer.h
@@ -33,6 +33,44 @@
 
 #include <sys/time.h>
 
+/* threshold in milliseconds that differentiates between clock skew
+   and clock jitter */
+#define CLOCK_SKEW_DETECT_TIME_IN_MS 1000
+
+/* structure for storing all relevant data of a single timer */
+typedef struct TIMER {
+    /* pointer to function of type void func(void *data) that will be
+       called when the timer is processed; it will also be used to
+       identify a specific timer */
+    void (*callback) (void *data);
+
+    /* pointer to data which will be passed to the callback function;
+       it will also be used to identify a specific timer */
+    void *data;
+
+    /* struct to hold the time (in seconds and milliseconds since the
+       Epoch) when the timer will be processed for the next time */
+    struct timeval when;
+
+    /* specifies the timer's triggering interval in milliseconds */
+    int interval;
+
+    /* specifies whether the timer should trigger indefinitely until
+       it is deleted (value of 0) or only once (all other values) */
+    int one_shot;
+
+    /* marks timer as being active (so it will get processed) or
+       inactive (which means the timer has been deleted and its
+       allocated memory may be re-used) */
+    int active;
+} TIMER;
+
+/* number of allocated timer slots */
+extern int nTimers;
+
+/* pointer to memory allocated for storing the timer slots */
+extern TIMER *Timers;
+
 int timer_add(void (*callback) (void *data), void *data, const int interval, const int one_shot);
 
 int timer_add_late(void (*callback) (void *data), void *data, const int interval, const int one_shot);
